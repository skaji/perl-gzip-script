#!/usr/bin/env perl
use v5.38;
use experimental qw(builtin class defer for_list try);

use File::Temp ();
use Getopt::Long ();
use IO::Compress::Gzip ();
use File::Basename ();

my $parser = Getopt::Long::Parser->new(
    config => [qw(no_auto_abbrev no_ignore_case bundling)],
);
$parser->getoptionsfromarray(\@ARGV,
    "i" => \my $in_place,
    "h" => \my $help,
) or exit 1;

my $script = shift;

if (!$script or $help) {
    die <<~'EOF';
    Usage: perl-gzip-script SCRIPT

    Options:
      -h  show this help
      -i  send output back to files, not stdout.

    Examples:
      $ perl-gzip-script script.pl > script.pl.gz
      $ perl-gzip-script -i script.pl
    EOF
}

my $out = $in_place
    ? File::Temp->new(DIR => File::Basename::dirname($script))
    : \*STDOUT;

$out->print(<<'EOF');
#!/usr/bin/env perl
use v5.16;
use IO::Uncompress::Gunzip ();
IO::Uncompress::Gunzip::gunzip \*DATA, \my $script, AutoClose => 1 or die $IO::Uncompress::Gunzip::GunzipError;
eval '#line 1'.' "'.__FILE__."\"\n" . $script;
die $@ if $@;
__DATA__
EOF

IO::Compress::Gzip::gzip $script, $out,
    Append => 1,
    Minimal => 1,
    Level => IO::Compress::Gzip::Z_BEST_COMPRESSION,
or die $IO::Compress::Gzip::GzipError;

if ($in_place) {
    $out->close;
    my $mode = (stat $script)[2];
    chmod $mode, $out->filename;
    rename $out->filename, $script or die $!;
    $out->unlink_on_destroy(0);
}
